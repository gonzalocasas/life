---
const startDate = new Date('1985-04-26');
const currentDate = new Date();

const weekContent = {
    1924: {
        title: 'Tacos with crickets 🦗',
        description: `In the beginning there was nothing, and then the mexicans said "Let there be tacos!".
        
        On May 2nd, we stopped being two strangers, and started being us.`
    },
    2023: {
        title: '🐶 Lucy',
        description: 'On March 23rd, you picked up Lucy and brought her into your home!'
    }
};

// Calculate complete years
const completeYears = Math.floor((currentDate - startDate) / (365.25 * 24 * 60 * 60 * 1000));
const completeYearWeeks = completeYears * 52;

// Calculate remaining weeks in current year
const yearStartDate = new Date(startDate);
yearStartDate.setFullYear(yearStartDate.getFullYear() + completeYears);
const remainingWeeks = Math.floor((currentDate - yearStartDate) / (7 * 24 * 60 * 60 * 1000));

// Total weeks lived
const weeksLived = completeYearWeeks + remainingWeeks;
---

<html lang="en">
    <head>
        <meta charset="utf-8" />
        <link rel="icon" type="image/svg+xml" href="favicon.svg" />
        <meta name="viewport" content="width=device-width" />
        <meta name="generator" content={Astro.generator} />
        <title>Η ζωή μου σε εβδομάδες : Κατερίνα</title>
        <link rel="stylesheet" href="../styles/main.css" />
    </head>
    <body>
        <div class="rotate-device-message">
            <div class="icon">📱</div>
            <div class="message">For the best view of your life in weeks, please rotate your device to landscape mode</div>
            <div class="button">Got it!</div>
        </div>
        <h1 class="title">Η ζωή μου σε εβδομάδες</h1>
        <div class="grid-wrapper">
            <div class="header-container">
                <div class="grid row header-row">weeks</div>
                <div class="grid row">
                <div class="week header"></div>
                <div class="week header"></div>

                {Array.from({ length: 52 }).map((_, colIndex) => {
                    const addWeekHeader = colIndex === 0 || ((colIndex + 1) % 4 === 0);
                    return (
                        <div class="week header">
                            {addWeekHeader && <div class="week-label">{colIndex + 1}</div>}
                        </div>
                    );
                })}
            </div>
            </div>
        </div>
        <div class="grid-wrapper">
            <div class="container">
            {Array.from({ length: 88 }).map((_, rowIndex) => (
                <div class={`grid row year-${rowIndex % 3}`}>
                    <div class="year-label" style={`visibility: ${rowIndex % 5 === 0 ? 'visible' : 'hidden'}`}>
                        {rowIndex}
                    </div>
                    {Array.from({ length: 52 }).map((_, colIndex) => {
                        const weekNumber = rowIndex * 52 + colIndex;
                        const lastWeeks = rowIndex === 87 && colIndex >= 49;
                        const hasContent = weekContent[weekNumber] !== undefined;
                        
                        // Calculate dates using the same logic as the year calculation
                        const yearsFromStart = Math.floor(weekNumber / 52);
                        const weeksIntoYear = weekNumber % 52;
                        
                        const weekStartDate = new Date(startDate);
                        weekStartDate.setFullYear(weekStartDate.getFullYear() + yearsFromStart);
                        weekStartDate.setDate(weekStartDate.getDate() + (weeksIntoYear * 7));
                        
                        const weekEndDate = new Date(weekStartDate);
                        weekEndDate.setDate(weekEndDate.getDate() + 6);
                        return (
                            <div 
                                class={`week ${weekNumber < weeksLived ? 'lived' : ''} ${lastWeeks ? 'last-weeks' : ''} ${hasContent ? 'has-content' : ''}`}
                                title={`Week ${weekNumber + 1}${hasContent ? ' - ' + weekContent[weekNumber].title : ''}`}
                                data-week={weekNumber}
                                data-start={weekStartDate.toISOString()}
                                data-end={weekEndDate.toISOString()}
                            />
                        );
                    })}
                </div>
            ))}
            </div>
        </div>

        <div class="footer">
            <div class="heart">💜</div>
            <div>Made for Katerina with love</div>
        </div>

        <div class="popup" id="weekPopup">
            <div class="popup-close">×</div>
            <div class="popup-title"></div>
            <div class="popup-date"></div>
            <div class="popup-description"></div>
        </div>

        <script define:vars={{weekContent}}>
            // Rotation message handling
            const rotateMessage = document.querySelector('.rotate-device-message');
            const rotateButton = rotateMessage.querySelector('.button');

            // Function to show/hide rotation message based on orientation
            function updateRotationMessage() {
                const isPortrait = window.matchMedia("(orientation: portrait)").matches;
                const isDismissed = localStorage.getItem('rotateMessageDismissed') === 'true';
                const isMobile = window.matchMedia("(max-width: 760px)").matches;

                rotateMessage.style.display = (isPortrait && isMobile && !isDismissed) ? 'block' : 'none';
            }

            // Initial check
            updateRotationMessage();

            // Listen for orientation changes
            window.addEventListener('orientationchange', updateRotationMessage);
            window.addEventListener('resize', updateRotationMessage);

            // Handle rotation message dismissal
            rotateButton.addEventListener('click', () => {
                rotateMessage.style.display = 'none';
                localStorage.setItem('rotateMessageDismissed', 'true');
            });

            // Add a way to test the message (double click on title)
            document.querySelector('.title').addEventListener('dblclick', () => {
                localStorage.removeItem('rotateMessageDismissed');
                updateRotationMessage();
            });

            // Week popup handling
            const closeButton = document.querySelector('.popup-close');
            closeButton.addEventListener('click', () => {
                document.getElementById('weekPopup').classList.remove('show');
            });

            const popup = document.getElementById('weekPopup');
            const popupTitle = popup.querySelector('.popup-title');
            const popupDescription = popup.querySelector('.popup-description');

            document.addEventListener('click', (e) => {
                if (e.target.classList.contains('week')) {
                    const weekNumber = parseInt(e.target.dataset.week);
                    const startDate = new Date(e.target.dataset.start);
                    const endDate = new Date(e.target.dataset.end);
                    const content = weekContent[weekNumber];
                    
                    // Calculate which week of the year this is
                    const yearsFromStart = Math.floor(weekNumber / 52);
                    const weeksIntoYear = weekNumber % 52;

                    const dateFormatter = new Intl.DateTimeFormat('en-US', { 
                        year: 'numeric',
                        month: 'long',
                        day: 'numeric'
                    });

                    popupTitle.textContent = `Week ${weekNumber + 1}`;
                    const popupDate = popup.querySelector('.popup-date');
                    
                    // Just show the start date
                    popupDate.textContent = `Week starting on ${dateFormatter.format(startDate)}`;
                    
                    if (content) {
                        popupTitle.textContent = content.title;
                        popupDescription.textContent = content.description;
                    } else {
                        popupTitle.textContent = `Week ${weekNumber + 1}`;
                        popupDescription.textContent = '';
                    }
                    popup.classList.add('show');
                }
            });

            function closePopup() {
                popup.classList.remove('show');
            }

            // Close popup when clicking outside
            document.addEventListener('click', (e) => {
                if (!popup.contains(e.target) && !e.target.classList.contains('week')) {
                    closePopup();
                }
            });

            // Close popup when pressing Escape key
            document.addEventListener('keydown', (e) => {
                if (e.key === 'Escape' && popup.classList.contains('show')) {
                    closePopup();
                }
            });
        </script>
    </body>
</html>
