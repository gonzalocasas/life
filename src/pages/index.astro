---
import GalleriaAlbum from '../components/GalleriaAlbum.astro';

const startDate = new Date('1985-04-26');
const currentDate = new Date();
console.log("Initializing 4000-Weeks with the following dates:");
console.log(` - Reference date=${startDate}`);
console.log(` - Current date=${currentDate}`);

interface WeekDetails {
    title: string;
    description: string;
}

const weekContent: Record<string, WeekDetails> = {
    '1924': {
        title: 'Tacos with crickets ü¶ó',
        description: `In the beginning there was nothing, and then the mexicans said "Let there be tacos!".
        
        On May 2nd, we stopped being two strangers, and started being us.`
    },
    '2023': {
        title: 'üê∂ Lucy',
        description: 'On March 23rd, you picked up Lucy and brought her into your home!'
    },
    '2080': {
        title: 'üéÇ K40',
        description: 'A gallery of 40 shades of pink'
    }
};

// Calculate complete years
const completeYears = Math.floor((currentDate - startDate) / (365.25 * 24 * 60 * 60 * 1000));
const completeYearWeeks = completeYears * 52;
console.log(`Completed years=${completeYears}, completed year weeks=${completeYearWeeks}`);
// Calculate remaining weeks in current year
const yearStartDate = new Date(startDate);
yearStartDate.setFullYear(yearStartDate.getFullYear() + completeYears);
const remainingWeeks = Math.floor((currentDate - yearStartDate) / (7 * 24 * 60 * 60 * 1000));
console.log(`Year start date=${yearStartDate}`)
console.log(`Remaining weeks in current year=${remainingWeeks}`);

// Total weeks lived
const weeksLived = completeYearWeeks + remainingWeeks;
console.log(`Total weeks lived=${weeksLived}`);
---

<html lang="en">
    <head>
        <meta charset="utf-8" />
        <link rel="icon" type="image/svg+xml" href="favicon.svg" />
        <meta name="viewport" content="width=device-width" />
        <meta name="generator" content={Astro.generator} />
        <title>Œó Œ∂œâŒÆ ŒºŒøœÖ œÉŒµ ŒµŒ≤Œ¥ŒøŒºŒ¨Œ¥ŒµœÇ : ŒöŒ±œÑŒµœÅŒØŒΩŒ±</title>
        <style>
            @keyframes float {
                0%, 100% { transform: translateY(0) rotate(90deg); }
                50% { transform: translateY(-10px) rotate(90deg); }
            }

            .rotate-device-message {
                display: none;
                position: fixed;
                top: 50%;
                left: 50%;
                transform: translate(-50%, -50%);
                background: white;
                padding: 2rem;
                text-align: center;
                font-size: 1rem;
                z-index: 1000;
                border-radius: 8px;
                box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
                max-width: 90%;
                width: 300px;
            }

            .rotate-device-message .icon {
                font-size: 2.5rem;
                margin-bottom: 1rem;
                display: inline-block;
                animation: float 2s ease-in-out infinite;
            }

            .rotate-device-message .message {
                line-height: 1.5;
                color: var(--text-color);
                margin-bottom: 1rem;
            }

            .rotate-device-message .button {
                background: var(--text-color);
                color: white;
                padding: 0.5rem 1rem;
                border-radius: 4px;
                cursor: pointer;
                display: inline-block;
                margin-top: 0.5rem;
            }

            @media screen and (max-width: 760px) and (orientation: portrait) {
                .rotate-device-message {
                    display: block;
                }
            }

            :root {
                --square-size: 12px;
                --square-gap: 3px;
                --group-gap: 8px;
                --dot-size: 3px;
                --text-color: #262626;
                --light-text-color: #888888;
            }

            @media (max-width: 1200px) {
                :root {
                    --square-size: 10px;
                    --square-gap: 2px;
                    --group-gap: 6px;
                    --dot-size: 2px;
                }
            }

            @media (max-width: 900px) {
                :root {
                    --square-size: 8px;
                    --square-gap: 2px;
                    --group-gap: 4px;
                    --dot-size: 2px;
                }
            }

            @media (max-width: 600px) {
                :root {
                    --square-size: 6px;
                    --square-gap: 1px;
                    --group-gap: 3px;
                    --dot-size: 2px;
                }
            }

            body {
                background: white;
                margin: 0;
                padding: 2rem 1rem;
                font-family: Palatino,Palatino Linotype,Palatino LT STD,Book Antiqua,Georgia,serif;
                overflow-x: hidden;
            }

            .title {
                font-size: 3rem;
                text-align: center;
                margin-bottom: 2rem;
                font-weight: lighter;
            }

            @media (max-width: 768px) {
                .title {
                    font-size: 2rem;
                    margin-bottom: 1.5rem;
                }
            }

            @media (max-width: 480px) {
                .title {
                    font-size: 1.5rem;
                    margin-bottom: 1rem;
                }
            }

            .container, .header-container {
                display: flex;
                flex-direction: column;
                align-items: flex-start;
                gap: var(--square-gap);
                position: relative;
                margin: 0;
                padding: 0;
                width: max-content;
            }

            .grid-wrapper {
                width: 100%;
                overflow-x: auto;
                -webkit-overflow-scrolling: touch;
                scrollbar-width: none;
                -ms-overflow-style: none;
                padding: 0.5rem;
                display: flex;
                justify-content: center;
            }

            .grid-wrapper::-webkit-scrollbar {
                display: none;
            }

            .week-label {
                color: var(--text-color);
                font-size: 10px;
                position: relative;
                top: -10px;
            }

            .year-label {
                min-width: 25px;
                text-align: right;
                margin-right: 10px;
                font-size: 10px;
                color: var(--text-color);
                visibility: visible;
                flex-shrink: 0;
            }

            @media (max-width: 900px) {
                .year-label {
                    min-width: 20px;
                    margin-right: 5px;
                    font-size: 8px;
                }
            }

            @media (max-width: 600px) {
                .year-label {
                    min-width: 15px;
                    margin-right: 3px;
                    font-size: 7px;
                }
            }

            .footer {
                text-align: center;
                margin-top: 3rem;
                color: var(--text-color);
                font-size: 0.7rem;
            }

            .heart {
                font-size: 0.7rem;
                margin-bottom: 0.5rem;
            }

            .row {
                display: flex;
                gap: var(--square-gap);
                align-items: center;
                flex-shrink: 0;
            }

            .week {
                width: var(--square-size);
                height: var(--square-size);
                border: 1px solid black;
                border-radius: 3px;
                flex-shrink: 0;
            }
            .header-row {
                justify-content: flex-start;
                padding-left: 2px;
                padding-bottom: 15px;
                color: var(--text-color);
                font-size: 10px;
            }

            .week.header {
                height: 0;
                border-color: white;
                position: relative;
            }

            .lived {
                background: black;
            }
            
            .last-weeks {
                width: var(--dot-size);
                height: var(--dot-size);
                margin: calc((var(--square-size) - var(--dot-size)) / 2);
            }

            .popup {
                display: none;
                position: fixed;
                top: 50%;
                left: 50%;
                transform: translate(-50%, -50%);
                background: white;
                padding: 1.5rem;
                border-radius: 8px;
                box-shadow: 0 8px 24px rgba(0, 0, 0, 0.5);
                z-index: 1000;
                max-width: 400px;
                width: 90%;
            }

            .popup.show {
                display: block;
            }

            .popup-title {
                font-size: 1.2rem;
                margin-bottom: 0.5rem;
                color: var(--text-color);
            }

            .popup-description {
                color: var(--text-color);
                line-height: 1.5;
                white-space: pre-line;
            }

            .popup-date {
                font-size: 0.8rem;
                color: var(--light-text-color);
                display: block;
                margin-bottom: 1rem;
            }

            .popup-close {
                position: absolute;
                top: 0.5rem;
                right: 0.5rem;
                padding: 0.5rem;
                cursor: pointer;
                color: var(--text-color);
                opacity: 0.6;
                transition: opacity 0.2s;
            }

            .popup-close:hover {
                opacity: 1;
            }

            .week {
                cursor: pointer;
            }

            .week:hover {
                box-shadow: 0 0 0 2px var(--text-color);
            }

            .week.has-content {
                position: relative;
            }

            @keyframes glare {
                0% { 
                    background-position: -200% 0;
                    opacity: 0;
                }
                15% {
                    opacity: 1;
                }
                40%, 60% { 
                    background-position: 200% 0;
                    opacity: 1;
                }
                85% {
                    opacity: 0;
                }
                100% { 
                    background-position: -200% 0;
                    opacity: 0;
                }
            }

            /* Vibrant pastel palette */
            .year-0 .week.has-content {
                position: relative;
                overflow: hidden;
                box-shadow: 0 0 3px rgba(255, 166, 193, 0.9); /* Bright Pink */
            }

            .year-1 .week.has-content {
                position: relative;
                overflow: hidden;
                box-shadow: 0 0 3px rgba(162, 217, 206, 0.9); /* Mint Green */
            }

            .year-2 .week.has-content {
                position: relative;
                overflow: hidden;
                box-shadow: 0 0 3px rgba(255, 198, 92, 0.9); /* Golden Yellow */
            }

            .year-0 .week.has-content::before {
                content: '';
                position: absolute;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                background: linear-gradient(
                    45deg,
                    transparent,
                    rgba(255, 166, 193, 0.7), /* Bright Pink */
                    transparent
                );
            }

            .year-1 .week.has-content::before {
                content: '';
                position: absolute;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                background: linear-gradient(
                    45deg,
                    transparent,
                    rgba(162, 217, 206, 0.7), /* Mint Green */
                    transparent
                );
            }

            .year-2 .week.has-content::before {
                content: '';
                position: absolute;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                background: linear-gradient(
                    45deg,
                    transparent,
                    rgba(255, 198, 92, 0.7), /* Golden Yellow */
                    transparent
                );
            }

            .week.has-content::before {
                background-size: 200% 100%;
                animation: glare 5s ease-in-out infinite;
                z-index: 2;
            }

            .week.has-content::after {
                content: '';
                position: absolute;
                top: 50%;
                left: 50%;
                transform: translate(-50%, -50%);
                width: 4px;
                height: 4px;
                background: var(--text-color);
                border-radius: 50%;
                opacity: 0.8;
            }


            /* Add extra gap for months (every 4 weeks) */
            .week:nth-child(4n + 2) {
                margin-left: var(--group-gap);
            }

            /* Add extra gap for decades (every 10 years) */
            .row:nth-child(10n + 1):not(:first-child) {
                margin-top: var(--group-gap);
            }
        </style>
    </head>
    <body>
        <div class="rotate-device-message">
            <div class="icon">üì±</div>
            <div class="message">For the best view of your life in weeks, please rotate your device to landscape mode</div>
            <div class="button">Got it!</div>
        </div>
        <h1 class="title">Œó Œ∂œâŒÆ ŒºŒøœÖ œÉŒµ ŒµŒ≤Œ¥ŒøŒºŒ¨Œ¥ŒµœÇ</h1>
        <div class="grid-wrapper">
            <div class="header-container">
                <div class="grid row header-row">weeks</div>
                <div class="grid row">
                <div class="week header"></div>
                <div class="week header"></div>

                {Array.from({ length: 52 }).map((_, colIndex) => {
                    const addWeekHeader = colIndex === 0 || ((colIndex + 1) % 4 === 0);
                    return (
                        <div class="week header">
                            {addWeekHeader && <div class="week-label">{colIndex + 1}</div>}
                        </div>
                    );
                })}
            </div>
            </div>
        </div>
        <div class="grid-wrapper">
            <div class="container">
            {Array.from({ length: 88 }).map((_, rowIndex) => (
                <div class={`grid row year-${rowIndex % 3}`}>
                    <div class="year-label" style={`visibility: ${rowIndex % 5 === 0 ? 'visible' : 'hidden'}`}>
                        {rowIndex}
                    </div>
                    {Array.from({ length: 52 }).map((_, colIndex) => {
                        const weekNumber = rowIndex * 52 + colIndex;
                        const lastWeeks = rowIndex === 87 && colIndex >= 49;
                        const hasContent = weekContent[String(weekNumber)] !== undefined;
                        const isBirthdayWeek = weekNumber === 2080; // 40th birthday week
                        // Calculate dates using the same logic as the year calculation
                        const yearsFromStart = Math.floor(weekNumber / 52);
                        const weeksIntoYear = weekNumber % 52;
                        
                        const weekStartDate = new Date(startDate);
                        weekStartDate.setFullYear(weekStartDate.getFullYear() + yearsFromStart);
                        weekStartDate.setDate(weekStartDate.getDate() + (weeksIntoYear * 7));
                        
                        const weekEndDate = new Date(weekStartDate);
                        weekEndDate.setDate(weekEndDate.getDate() + 6);
                        return (
                            <div 
                                class={`week ${weekNumber <= weeksLived ? 'lived' : ''} ${lastWeeks ? 'last-weeks' : ''} ${hasContent ? 'has-content' : ''}`}
                                title={`Week ${weekNumber + 1}${hasContent ? ' - ' + weekContent[weekNumber].title : ''}`}
                                data-week={weekNumber}
                                data-start={weekStartDate.toISOString()}
                                data-end={weekEndDate.toISOString()}
                            />
                        );
                    })}
                </div>
            ))}
            </div>
        </div>

        <div class="footer">
            <div class="heart">üíú</div>
            <div>Made for Katerina with love</div>
        </div>

        <div class="popup" id="weekPopup">
            <div class="popup-close">√ó</div>
            <div class="popup-title"></div>
            <div class="popup-date"></div>
            <div class="popup-description"></div>
        </div>
        
        <GalleriaAlbum />

        <script define:vars={{weekContent}}>
            // Rotation message handling
            const rotateMessage = document.querySelector('.rotate-device-message');
            const rotateButton = rotateMessage.querySelector('.button');

            // Function to show/hide rotation message based on orientation
            function updateRotationMessage() {
                const isPortrait = window.matchMedia("(orientation: portrait)").matches;
                const isDismissed = localStorage.getItem('rotateMessageDismissed') === 'true';
                const isMobile = window.matchMedia("(max-width: 760px)").matches;

                rotateMessage.style.display = (isPortrait && isMobile && !isDismissed) ? 'block' : 'none';
            }

            // Initial check
            updateRotationMessage();

            // Listen for orientation changes
            window.addEventListener('orientationchange', updateRotationMessage);
            window.addEventListener('resize', updateRotationMessage);

            // Handle rotation message dismissal
            rotateButton.addEventListener('click', () => {
                rotateMessage.style.display = 'none';
                localStorage.setItem('rotateMessageDismissed', 'true');
            });

            // Add a way to test the message (double click on title)
            document.querySelector('.title').addEventListener('dblclick', () => {
                localStorage.removeItem('rotateMessageDismissed');
                updateRotationMessage();
            });

            // Week popup handling
            const closeButton = document.querySelector('.popup-close');
            closeButton.addEventListener('click', () => {
                document.getElementById('weekPopup').classList.remove('show');
            });

            const popup = document.getElementById('weekPopup');
            // Add null checks to prevent errors
            const popupTitle = popup ? popup.querySelector('.popup-title') : null;
            const popupDate = popup ? popup.querySelector('.popup-date') : null;
            const popupDescription = popup ? popup.querySelector('.popup-description') : null;

            document.addEventListener('click', (e) => {
                const weekElement = e.target.closest('.week');
                if (weekElement) {
                    const weekNumber = parseInt(weekElement.dataset.week, 10);
                    // Check if this is the 40th birthday week (2080)
                    const is40thBirthdayWeek = weekNumber === 2080;
                    const content = weekContent[String(weekNumber)];
                    
                    // Get dates from dataset
                    const weekStartDate = new Date(weekElement.dataset.start);
                    const weekEndDate = new Date(weekElement.dataset.end);

                    const dateFormatter = new Intl.DateTimeFormat('en-US', { 
                        year: 'numeric',
                        month: 'long',
                        day: 'numeric'
                    });

                    // Format date range for display
                    const formattedDate = `${dateFormatter.format(weekStartDate)} - ${dateFormatter.format(weekEndDate)}`;
                    
                    // Handle 40th birthday week
                    if (is40thBirthdayWeek) {
                        if (typeof window.openBirthdayGallery === 'function') {
                            window.openBirthdayGallery();
                        }
                    } else if (content) {
                        // Show week with content
                        if (popup && popupTitle && popupDate && popupDescription) {
                            popupTitle.textContent = content.title;
                            popupDate.textContent = formattedDate;
                            popupDescription.innerHTML = content.description.replace(/\n/g, '<br>');
                            popup.classList.add('show');
                        }
                    } else {
                        // Show regular week
                        if (popup && popupTitle && popupDate && popupDescription) {
                            popupTitle.textContent = `Week ${weekNumber + 1}`;
                            popupDate.textContent = formattedDate;
                            popupDescription.innerHTML = '';
                            popup.classList.add('show');
                        }
                    }
                }
            });

            function closePopup() {
                if (popup) {
                    popup.classList.remove('show');
                }
            }

            // Close popup when clicking outside
            document.addEventListener('click', (e) => {
                if (!popup.contains(e.target) && !e.target.classList.contains('week')) {
                    closePopup();
                }
            });

            // Close popup when pressing Escape key
            document.addEventListener('keydown', (e) => {
                if (e.key === 'Escape' && popup.classList.contains('show')) {
                    closePopup();
                }
            });
        </script>
    </body>
</html>
